<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview on TensorFlow for R</title><link>/tutorials/advanced/</link><description>Recent content in Overview on TensorFlow for R</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/tutorials/advanced/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>/tutorials/advanced/distributed/distributed_training_with_keras/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/advanced/distributed/distributed_training_with_keras/</guid><description>Distributed training with Keras code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;} code{white-space: pre;} pre code.sourceCode { white-space: pre; position: relative; } pre code.sourceCode span { display: inline-block; line-height: 1.25; } pre code.sourceCode span:empty { height: 1.2em; } code.sourceCode span { color: inherit; text-decoration: inherit; } div.sourceCode { margin: 1em 0; } pre.</description></item><item><title>Automatic differentiation and gradient tape</title><link>/tutorials/advanced/customization/autodiff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/advanced/customization/autodiff/</guid><description>In this tutorial we will cover automatic differentiation, a key technique for optimizing machine learning models.
Setup We will use the TensorFlow R package:
library(tensorflow) Gradient Tapes TensorFlow provides the tf$GradientTape API for automatic differentiation - computing the gradient of a computation with respect to its input variables.
Tensorflow “records” all operations executed inside the context of a tf$GradientTape onto a “tape”. Tensorflow then uses that tape and the gradients associated with each recorded operation to compute the gradients of a “recorded” computation using reverse mode differentiation.</description></item><item><title>Classify structured data with feature columns</title><link>/tutorials/advanced/structured/classify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/advanced/structured/classify/</guid><description>This tutorial demonstrates how to classify structured data (e.g. tabular data in a CSV). We will use Keras to define the model, and feature columns as a bridge to map from columns in a CSV to features used to train the model. This tutorial contains complete code to:
Load a CSV file using the tidyverse. Build an input pipeline to batch and shuffle the rows using tf.data. Map from columns in the CSV to features used to train the model using feature columns.</description></item><item><title>Convolutional Neural Network (CNN)</title><link>/tutorials/advanced/images/cnn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/advanced/images/cnn/</guid><description>This tutorial demonstrates training a simple Convolutional Neural Network (CNN) to classify CIFAR images. Because this tutorial uses the Keras Sequential API, creating and training our model will take just a few lines of code.
Setup library(tensorflow) library(keras) Download and prepare the CIFAR10 dataset The CIFAR10 dataset contains 60,000 color images in 10 classes, with 6,000 images in each class. The dataset is divided into 50,000 training images and 10,000 testing images.</description></item><item><title>Custom layers</title><link>/tutorials/advanced/customization/custom-layers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/advanced/customization/custom-layers/</guid><description>We recommend using keras as a high-level API for building neural networks. That said, most TensorFlow APIs are usable with eager execution.
library(tensorflow) library(keras) Layers: common sets of useful operations Most of the time when writing code for machine learning models you want to operate at a higher level of abstraction than individual operations and manipulation of individual variables.
Many machine learning models are expressible as the composition and stacking of relatively simple layers, and TensorFlow provides both a set of many common layers as a well as easy ways for you to write your own application-specific layers either from scratch or as the composition of existing layers.</description></item><item><title>Custom training: basics</title><link>/tutorials/advanced/customization/custom-training/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/advanced/customization/custom-training/</guid><description>In the previous tutorial, you covered the TensorFlow APIs for automatic differentiation—a basic building block for machine learning. In this tutorial, you will use the TensorFlow primitives introduced in the prior tutorials to do some simple machine learning.
TensorFlow also includes Keras —a high-level neural network API that provides useful abstractions to reduce boilerplate and makes TensorFlow easier to use without sacrificing flexibility and performance. We strongly recommend the Keras API for development.</description></item><item><title>Tensors and operations</title><link>/tutorials/advanced/customization/tensors-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/advanced/customization/tensors-operations/</guid><description>This is an introductory TensorFlow tutorial shows how to:
Import the required package Create and use tensors Use GPU acceleration Import TensorFlow To get started, import the tensorflow module. As of TensorFlow 2.0, eager execution is turned on by default. This enables a more interactive frontend to TensorFlow, the details of which we will discuss much later.
library(tensorflow) Tensors A Tensor is a multi-dimensional array. Similar to array objects in R, tf$Tensor objects have a data type and a shape.</description></item><item><title>Transfer learning with TensorFlow Hub</title><link>/tutorials/advanced/images/transfer-learning-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/advanced/images/transfer-learning-hub/</guid><description>TensorFlow Hub is a way to share pretrained model components. See the TensorFlow Module Hub for a searchable listing of pre-trained models. This tutorial demonstrates:
How to use TensorFlow Hub Keras. How to do image classification using TensorFlow Hub. How to do simple transfer learning. Setup library(keras) library(tfhub) An ImageNet classifier Download the classifier Use layer_hub to load a mobilenet and wrap it up as a keras layer.</description></item></channel></rss>