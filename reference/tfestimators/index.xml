<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TensorFlow for R</title><link>/reference/tfestimators/</link><description>Recent content on TensorFlow for R</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/reference/tfestimators/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>/reference/tfestimators/coef/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/coef/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Extract Model Coefficients Extract Model Coefficients</description></item><item><title/><link>/reference/tfestimators/coef.tf_estimator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/coef.tf_estimator/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators Simplify Function TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Extract Model Coefficients Extract Model Coefficients</description></item><item><title/><link>/reference/tfestimators/column_weighted_categorical/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/column_weighted_categorical/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Experiments Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Applies weight values to a _CategoricalColumn.</description></item><item><title/><link>/reference/tfestimators/dnn_classifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/dnn_classifier/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Experiments Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference A classifier for TensorFlow DNN models.</description></item><item><title/><link>/reference/tfestimators/dnn_linear_combined_classifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/dnn_linear_combined_classifier/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Experiments Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference An estimator for TensorFlow Linear and DNN joined classification models.</description></item><item><title/><link>/reference/tfestimators/dnn_linear_combined_regressor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/dnn_linear_combined_regressor/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Experiments Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference An estimator for TensorFlow Linear and DNN joined models for regression.</description></item><item><title/><link>/reference/tfestimators/dnn_regressor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/dnn_regressor/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Experiments Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference A Regressor for TensorFlow DNN Models Initializes a TensorFlow deep neural network regressor.</description></item><item><title/><link>/reference/tfestimators/dynamic_rnn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/dynamic_rnn/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Dynamic RNN Estimator Dynamic RNN Estimator</description></item><item><title/><link>/reference/tfestimators/estimatorsessionrunhook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/estimatorsessionrunhook/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Experiments Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference TensorFlow Session Run Hook used in Estimators This is the base R6 class used for custom session run hooks, which can be used to monitor estimators while they are trained by TensorFlow.</description></item><item><title/><link>/reference/tfestimators/evaluate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/evaluate/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Evaluate a Model Evaluate a model object.</description></item><item><title/><link>/reference/tfestimators/evaluate.tf_experiment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/evaluate.tf_experiment/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators Simplify Function TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Evaluate on The Evaluation Data Runs evaluation on the evaluation data and returns the result.</description></item><item><title/><link>/reference/tfestimators/experiment.tf_estimator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/experiment.tf_estimator/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators Simplify Function TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Construct an Experiment from an Estimator An Experiment contains all information needed to train a model.</description></item><item><title/><link>/reference/tfestimators/export_savedmodel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/export_savedmodel/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Export a Saved Model Serialize a model to disk.</description></item><item><title/><link>/reference/tfestimators/get_latest_checkpoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/get_latest_checkpoint/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators Simplify Function TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Get the Latest Checkpoint in a Checkpoint Directory Get the Latest Checkpoint in a Checkpoint Directory</description></item><item><title/><link>/reference/tfestimators/get_saved_history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/get_saved_history/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators Simplify Function TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Get Saved History This function retrieves the saved metrics history via hook_history_saver().</description></item><item><title/><link>/reference/tfestimators/linear_classifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/linear_classifier/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Experiments Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Linear classifier model.</description></item><item><title/><link>/reference/tfestimators/linear_regressor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/linear_regressor/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Experiments Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference An estimator for TensorFlow Linear regression problems.</description></item><item><title/><link>/reference/tfestimators/pipe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/pipe/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Experiments Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Pipe operator See %&amp;gt;% for more details.</description></item><item><title/><link>/reference/tfestimators/predict/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/predict/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Generate Predictions with an Estimator Generate predicted labels / values for input data provided by input_fn().</description></item><item><title/><link>/reference/tfestimators/set_column_names/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/set_column_names/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Experiments Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Set Available Feature Column Names Provide a list of names (or an R object with names() or colnames()) which are valid for selection within column_ feature column functions.</description></item><item><title/><link>/reference/tfestimators/state_saving_rnn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/state_saving_rnn/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Experiments Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference State Saving RNN Estimator State Saving RNN Estimator</description></item><item><title/><link>/reference/tfestimators/svm_classifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/svm_classifier/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Support Vector Machine (SVM) model for binary classification.</description></item><item><title/><link>/reference/tfestimators/train/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/train/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Train a Model Train a model object.</description></item><item><title/><link>/reference/tfestimators/train.tf_experiment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/train.tf_experiment/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators Simplify Function TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Fit the Estimator Using Training Data Train the estimator for self.</description></item><item><title/><link>/reference/tfestimators/train_and_evaluate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/train_and_evaluate/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Simultaneously Train and Evaluate a Model Train and evaluate a model object.</description></item><item><title/><link>/reference/tfestimators/train_and_evaluate.tf_experiment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/train_and_evaluate.tf_experiment/</guid><description>tfestimators Home Using Getting Started Estimator Basics Input Functions Feature Columns Advanced Run Hooks Custom Estimators Simplify Function TensorFlow Layers TensorBoard Visualization Parsing Utilities Examples Reference Interleaves Training and Evaluation The frequency of evaluation is controlled by the contructor arg min_eval_frequency.</description></item><item><title>A Custom Run Hook for Saving Metrics History</title><link>/reference/tfestimators/hook_history_saver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/hook_history_saver/</guid><description> This hook allows users to save the metrics history produced during training or evaluation in a specified frequency.
hook_history_saver(every_n_step = 10) Arguments every_n_step Save the metrics every N steps
See also Other session_run_hook wrappers: hook_checkpoint_saver, hook_global_step_waiter, hook_logging_tensor, hook_nan_tensor, hook_progress_bar, hook_step_counter, hook_stop_at_step, hook_summary_saver, session_run_hook</description></item><item><title>A Custom Run Hook to Create and Update Progress Bar During Training or Evaluation</title><link>/reference/tfestimators/hook_progress_bar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/hook_progress_bar/</guid><description> This hook creates a progress bar that creates and updates the progress bar during training or evaluation.
hook_progress_bar() See also Other session_run_hook wrappers: hook_checkpoint_saver, hook_global_step_waiter, hook_history_saver, hook_logging_tensor, hook_nan_tensor, hook_step_counter, hook_stop_at_step, hook_summary_saver, session_run_hook</description></item><item><title>Base Documentation for Canned Estimators</title><link>/reference/tfestimators/estimators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/estimators/</guid><description>Base Documentation for Canned Estimators
Arguments object A TensorFlow estimator.
feature_columns An R list containing all of the feature columns used by the model (typically, generated by feature_columns()).
model_dir Directory to save the model parameters, graph, and so on. This can also be used to load checkpoints from the directory into a estimator to continue training a previously saved model.</description></item><item><title>Base Documentation for Feature Column Constructors</title><link>/reference/tfestimators/column_base/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/column_base/</guid><description> Base Documentation for Feature Column Constructors
Arguments ... Expression(s) identifying input feature(s). Used as the column name and the dictionary key for feature parsing configs, feature tensors, and feature columns.</description></item><item><title>Base Documentation for train, evaluate, and predict.</title><link>/reference/tfestimators/train-evaluate-predict/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/train-evaluate-predict/</guid><description>Base Documentation for train, evaluate, and predict.
Arguments input_fn An input function, typically generated by the input_fn() helper function.
hooks A list of R functions, to be used as callbacks inside the training loop. By default, hook_history_saver(every_n_step = 10) and hook_progress_bar() will be attached if not provided to save the metrics history and create the progress bar.
checkpoint_path The path to a specific model checkpoint to be used for prediction.</description></item><item><title>Boosted Trees Estimator</title><link>/reference/tfestimators/boosted_trees_estimators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/boosted_trees_estimators/</guid><description>Construct a boosted trees estimator.
boosted_trees_regressor(feature_columns, n_batches_per_layer, model_dir = NULL, label_dimension = 1L, weight_column = NULL, n_trees = 100L, max_depth = 6L, learning_rate = 0.1, l1_regularization = 0, l2_regularization = 0, tree_complexity = 0, min_node_weight = 0, config = NULL) boosted_trees_classifier(feature_columns, n_batches_per_layer, model_dir = NULL, n_classes = 2L, weight_column = NULL, label_vocabulary = NULL, n_trees = 100L, max_depth = 6L, learning_rate = 0.1, l1_regularization = 0, l2_regularization = 0, tree_complexity = 0, min_node_weight = 0, config = NULL) Arguments feature_columns An R list containing all of the feature columns used by the model (typically, generated by feature_columns()).</description></item><item><title>Canonical Metric Keys</title><link>/reference/tfestimators/metric_keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/metric_keys/</guid><description> The canonical set of keys that can be used to access metrics from canned estimators.
metric_keys() See also Other estimator keys: mode_keys, prediction_keys
Examples if (FALSE) { metrics &amp;lt;- metric_keys() # Get the available keys metrics metrics$ACCURACY }</description></item><item><title>Canonical Mode Keys</title><link>/reference/tfestimators/mode_keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/mode_keys/</guid><description> The names for different possible modes for an estimator. The following standard keys are defined:
mode_keys() Details TRAINTraining mode. EVALEvaluation mode. PREDICTPrediction / inference mode. See also Other estimator keys: metric_keys, prediction_keys
Examples if (FALSE) { modes &amp;lt;- mode_keys() modes$TRAIN }</description></item><item><title>Canonical Model Prediction Keys</title><link>/reference/tfestimators/prediction_keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/prediction_keys/</guid><description> The canonical set of keys used for models and estimators that provide different types of predicted values through their predict() method.
prediction_keys() See also Other estimator keys: metric_keys, mode_keys
Examples if (FALSE) { keys &amp;lt;- prediction_keys() # Get the available keys keys # Key for retrieving probabilities from prediction values keys$PROBABILITIES }</description></item><item><title>Configuration for the eval component of &lt;code&gt;train_and_evaluate&lt;/code&gt;</title><link>/reference/tfestimators/eval_spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/eval_spec/</guid><description>EvalSpec combines details of evaluation of the trained model as well as its export. Evaluation consists of computing metrics to judge the performance of the trained model. Export writes out the trained model on to external storage.
eval_spec(input_fn, steps = 100, name = NULL, hooks = NULL, exporters = NULL, start_delay_secs = 120, throttle_secs = 600) Arguments input_fn Evaluation input function returning a tuple of:
features - Tensor or dictionary of string feature name to Tensor.</description></item><item><title>Configuration for the train component of &lt;code&gt;train_and_evaluate&lt;/code&gt;</title><link>/reference/tfestimators/train_spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/train_spec/</guid><description>TrainSpec determines the input data for the training, as well as the duration. Optional hooks run at various stages of training.
train_spec(input_fn, max_steps = NULL, hooks = NULL) Arguments input_fn Training input function returning a tuple of:
features - Tensor or dictionary of string feature name to Tensor.
labels - Tensor or dictionary of Tensor with labels.
max_steps Positive number of total steps for which to train model.</description></item><item><title>Construct a Bucketized Column</title><link>/reference/tfestimators/column_bucketized/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/column_bucketized/</guid><description>Construct a bucketized column, representing discretized dense input. Buckets include the left boundary, and exclude the right boundary.
column_bucketized(source_column, boundaries) Arguments source_column A one-dimensional dense column, as generated by column_numeric().
boundaries A sorted list or list of floats specifying the boundaries.
Value A bucketized column.
Raises ValueError: If source_column is not a numeric column, or if it is not one-dimensional.</description></item><item><title>Construct a Categorical Column that Returns Identity Values</title><link>/reference/tfestimators/column_categorical_with_identity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/column_categorical_with_identity/</guid><description>Use this when your inputs are integers in the range [0, num_buckets), and you want to use the input value itself as the categorical ID. Values outside this range will result in default_value if specified, otherwise it will fail.
column_categorical_with_identity(..., num_buckets, default_value = NULL) Arguments ... Expression(s) identifying input feature(s). Used as the column name and the dictionary key for feature parsing configs, feature tensors, and feature columns.</description></item><item><title>Construct a Categorical Column with a Vocabulary File</title><link>/reference/tfestimators/column_categorical_with_vocabulary_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/column_categorical_with_vocabulary_file/</guid><description>Use this when your inputs are in string or integer format, and you have a vocabulary file that maps each value to an integer ID. By default, out-of-vocabulary values are ignored. Use either (but not both) of num_oov_buckets and default_value to specify how to include out-of-vocabulary values. For input dictionary features, features[key] is either tensor or sparse tensor object. If it&#39;s tensor object, missing values can be represented by -1 for int and &#39;&#39; for string.</description></item><item><title>Construct a Categorical Column with In-Memory Vocabulary</title><link>/reference/tfestimators/column_categorical_with_vocabulary_list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/column_categorical_with_vocabulary_list/</guid><description>Use this when your inputs are in string or integer format, and you have an in-memory vocabulary mapping each value to an integer ID. By default, out-of-vocabulary values are ignored. Use default_value to specify how to include out-of-vocabulary values. For the input dictionary features, features$key is either tensor or sparse tensor object. If it&#39;s tensor object, missing values can be represented by -1 for int and &#39;&#39; for string.</description></item><item><title>Construct a Crossed Column</title><link>/reference/tfestimators/column_crossed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/column_crossed/</guid><description>Returns a column for performing crosses of categorical features. Crossed features will be hashed according to hash_bucket_size.
column_crossed(keys, hash_bucket_size, hash_key = NULL) Arguments keys An iterable identifying the features to be crossed. Each element can be either:
string: Will use the corresponding feature which must be of string type.
categorical column: Will use the transformed tensor produced by this column. Does not support hashed categorical columns.</description></item><item><title>Construct a Custom Estimator</title><link>/reference/tfestimators/estimator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/estimator/</guid><description>Construct a custom estimator, to be used to train and evaluate TensorFlow models.
estimator(model_fn, model_dir = NULL, config = NULL, params = NULL, class = NULL) Arguments model_fn The model function. See Model Function for details on the structure of a model function.
model_dir Directory to save model parameters, graph and etc. This can also be used to load checkpoints from the directory into a estimator to continue training a previously saved model.</description></item><item><title>Construct a Dense Column</title><link>/reference/tfestimators/column_embedding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/column_embedding/</guid><description>Use this when your inputs are sparse, but you want to convert them to a dense representation (e.g., to feed to a DNN). Inputs must be a categorical column created by any of the column_categorical_*() functions.
column_embedding(categorical_column, dimension, combiner = &#34;mean&#34;, initializer = NULL, ckpt_to_load_from = NULL, tensor_name_in_ckpt = NULL, max_norm = NULL, trainable = TRUE) Arguments categorical_column A categorical column created by a column_categorical_*() function. This column produces the sparse IDs that are inputs to the embedding lookup.</description></item><item><title>Construct a Linear Estimator</title><link>/reference/tfestimators/linear_estimators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/linear_estimators/</guid><description>Construct a linear model, which can be used to predict a continuous outcome (in the case of linear_regressor()) or a categorical outcome (in the case of linear_classifier()).
linear_regressor(feature_columns, model_dir = NULL, label_dimension = 1L, weight_column = NULL, optimizer = &#34;Ftrl&#34;, config = NULL, partitioner = NULL) linear_classifier(feature_columns, model_dir = NULL, n_classes = 2L, weight_column = NULL, label_vocabulary = NULL, optimizer = &#34;Ftrl&#34;, config = NULL, partitioner = NULL) Arguments feature_columns An R list containing all of the feature columns used by the model (typically, generated by feature_columns()).</description></item><item><title>Construct a Real-Valued Column</title><link>/reference/tfestimators/column_numeric/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/column_numeric/</guid><description>Construct a Real-Valued Column
column_numeric(..., shape = c(1L), default_value = NULL, dtype = tf$float32, normalizer_fn = NULL) Arguments ... Expression(s) identifying input feature(s). Used as the column name and the dictionary key for feature parsing configs, feature tensors, and feature columns.
shape An integer vector that specifies the shape of the tensor. An integer can be given which means a single dimension tensor with given width.</description></item><item><title>Construct a Weighted Categorical Column</title><link>/reference/tfestimators/column_categorical_weighted/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/column_categorical_weighted/</guid><description>Use this when each of your sparse inputs has both an ID and a value. For example, if you&#39;re representing text documents as a collection of word frequencies, you can provide 2 parallel sparse input features (&#39;terms&#39; and &#39;frequencies&#39; below).
column_categorical_weighted(categorical_column, weight_feature_key, dtype = tf$float32) Arguments categorical_column A categorical column created by column_categorical_*() functions.
weight_feature_key String key for weight values.
dtype Type of weights, such as tf$float32.</description></item><item><title>Construct an Experiment</title><link>/reference/tfestimators/experiment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/experiment/</guid><description> Construct an experiment object.
experiment(object, ...) Arguments object An R object.
... Optional arguments passed on to implementing methods.</description></item><item><title>Construct an Input Function</title><link>/reference/tfestimators/input_fn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/input_fn/</guid><description>This function constructs input function from various types of input used to feed different TensorFlow estimators.
input_fn(object, ...) # S3 method for default input_fn(object, ...) # S3 method for formula input_fn(object, data, ...) # S3 method for data.frame input_fn(object, features, response = NULL, batch_size = 128, shuffle = &#34;auto&#34;, num_epochs = 1, queue_capacity = 1000, num_threads = 1, ...) # S3 method for list input_fn(object, features, response = NULL, batch_size = 128, shuffle = &#34;</description></item><item><title>Construct an Input Layer</title><link>/reference/tfestimators/input_layer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/input_layer/</guid><description>Returns a dense tensor as input layer based on given feature_columns. At the first layer of the model, this column oriented data should be converted to a single tensor.
input_layer(features, feature_columns, weight_collections = NULL, trainable = TRUE) Arguments features A mapping from key to tensors. Feature columns look up via these keys. For example column_numeric(&#39;price&#39;) will look at &#39;price&#39; key in this dict. Values can be a sparse tensor or tensor depends on corresponding feature column.</description></item><item><title>Construct Input Function Containing Python Dictionaries of Numpy Arrays</title><link>/reference/tfestimators/numpy_input_fn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/numpy_input_fn/</guid><description>This returns a function outputting features and target based on the dict of numpy arrays. The dict features has the same keys as the x.
numpy_input_fn(x, y = NULL, batch_size = 128, num_epochs = 1, shuffle = NULL, queue_capacity = 1000, num_threads = 1) Arguments x dict of numpy array object.
y numpy array object. NULL if absent.
batch_size Integer, size of batches to return.</description></item><item><title>Create Custom Session Run Hooks</title><link>/reference/tfestimators/session_run_hook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/session_run_hook/</guid><description>Create a set of session run hooks, used to record information during training of an estimator. See Details for more information on the various hooks that can be defined.
session_run_hook(begin = function() { }, after_create_session = function(session, coord) { }, before_run = function(context) { }, after_run = function(context, values) { }, end = function(session) { }) Arguments begin function(): An R function, to be called once before using the session.</description></item><item><title>Create Session Run Arguments</title><link>/reference/tfestimators/session_run_args/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/session_run_args/</guid><description> Create a set of session run arguments. These are used as the return values in the before_run(context) callback of a session_run_hook(), for requesting the values of specific tensor in the after_run(context, values) callback.
session_run_args(...) Arguments ... A set of tensors or operations.
See also session_run_hook()</description></item><item><title>Deep Neural Networks</title><link>/reference/tfestimators/dnn_estimators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/dnn_estimators/</guid><description>Create a deep neural network (DNN) estimator.
dnn_regressor(hidden_units, feature_columns, model_dir = NULL, label_dimension = 1L, weight_column = NULL, optimizer = &#34;Adagrad&#34;, activation_fn = &#34;relu&#34;, dropout = NULL, input_layer_partitioner = NULL, config = NULL) dnn_classifier(hidden_units, feature_columns, model_dir = NULL, n_classes = 2L, weight_column = NULL, label_vocabulary = NULL, optimizer = &#34;Adagrad&#34;, activation_fn = &#34;relu&#34;, dropout = NULL, input_layer_partitioner = NULL, config = NULL) Arguments hidden_units An integer vector, indicating the number of hidden units in each layer.</description></item><item><title>Define an Estimator Specification</title><link>/reference/tfestimators/estimator_spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/estimator_spec/</guid><description>Define the estimator specification, used as part of the model_fn defined with custom estimators created by estimator(). See estimator() for more details.
estimator_spec(mode, predictions = NULL, loss = NULL, train_op = NULL, eval_metric_ops = NULL, training_hooks = NULL, evaluation_hooks = NULL, prediction_hooks = NULL, training_chief_hooks = NULL, ...) Arguments mode A key that specifies whether we are performing training (&#34;train&#34;), evaluation (&#34;eval&#34;), or prediction (&#34;infer&#34;). These values can also be accessed through the mode_keys() object.</description></item><item><title>Delay Execution until Global Step Reaches to &lt;code&gt;wait_until_step&lt;/code&gt;.</title><link>/reference/tfestimators/hook_global_step_waiter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/hook_global_step_waiter/</guid><description> This hook delays execution until global step reaches to wait_until_step. It is used to gradually start workers in distributed settings. One example usage would be setting wait_until_step=int(K*log(task_id+1)) assuming that task_id=0 is the chief.
hook_global_step_waiter(wait_until_step) Arguments wait_until_step An integer indicating that until which global step should we wait.
See also Other session_run_hook wrappers: hook_checkpoint_saver, hook_history_saver, hook_logging_tensor, hook_nan_tensor, hook_progress_bar, hook_step_counter, hook_stop_at_step, hook_summary_saver, session_run_hook</description></item><item><title>Establish a Feature Columns Selection Scope</title><link>/reference/tfestimators/column-scope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/column-scope/</guid><description> This helper function provides a set of names to be used by tidyselect helpers in e.g. feature_columns().
set_columns(columns) with_columns(columns, expr) scoped_columns(columns) Arguments columns Either a named R object (whose names will be used to provide a selection context), or a character vector of such names.
expr An R expression, to be evaluated with the selection context active.</description></item><item><title>Evaluate an Estimator</title><link>/reference/tfestimators/evaluate.tf_estimator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/evaluate.tf_estimator/</guid><description>Evaluate an estimator on input data provided by an input_fn().
# S3 method for tf_estimator evaluate(object, input_fn, steps = NULL, checkpoint_path = NULL, name = NULL, hooks = NULL, simplify = TRUE, ...) Arguments object A TensorFlow estimator.
input_fn An input function, typically generated by the input_fn() helper function.
steps The number of steps for which the model should be evaluated on this particular evaluate() invocation.</description></item><item><title>Feature Columns</title><link>/reference/tfestimators/feature_columns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/feature_columns/</guid><description> Constructors for feature columns. A feature column defines the expected &#39;shape&#39; of an input Tensor.
feature_columns(..., names = NULL) Arguments ... One or more feature column definitions. The tidyselect package is used to power generation of feature columns.
names Available feature names (for selection / pattern matching) as a character vector (or R object that implements names() or colnames()).</description></item><item><title>Generate Predictions with an Estimator</title><link>/reference/tfestimators/predict.tf_estimator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/predict.tf_estimator/</guid><description>Generate predicted labels / values for input data provided by input_fn().
# S3 method for tf_estimator predict(object, input_fn, checkpoint_path = NULL, predict_keys = c(&#34;predictions&#34;, &#34;classes&#34;, &#34;class_ids&#34;, &#34;logistic&#34;, &#34;logits&#34;, &#34;probabilities&#34;), hooks = NULL, as_iterable = FALSE, simplify = TRUE, yield_single_examples = TRUE, ...) Arguments object A TensorFlow estimator.
input_fn An input function, typically generated by the input_fn() helper function.
checkpoint_path The path to a specific model checkpoint to be used for prediction.</description></item><item><title>Generates Parsing Spec for TensorFlow Example to be Used with Classifiers</title><link>/reference/tfestimators/classifier_parse_example_spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/classifier_parse_example_spec/</guid><description>If users keep data in TensorFlow Example format, they need to call tf$parse_example with a proper feature spec. There are two main things that this utility helps:
Users need to combine parsing spec of features with labels and weights (if any) since they are all parsed from same tf$Example instance. This utility combines these specs.
It is difficult to map expected label by a classifier such as dnn_classifier to corresponding tf$parse_example spec.</description></item><item><title>Generates Parsing Spec for TensorFlow Example to be Used with Regressors</title><link>/reference/tfestimators/regressor_parse_example_spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/regressor_parse_example_spec/</guid><description>If users keep data in tf$Example format, they need to call tf$parse_example with a proper feature spec. There are two main things that this utility helps:
Users need to combine parsing spec of features with labels and weights (if any) since they are all parsed from same tf$Example instance. This utility combines these specs.
It is difficult to map expected label by a regressor such as dnn_regressor to corresponding tf$parse_example spec.</description></item><item><title>Get the Latest Checkpoint in a Checkpoint Directory</title><link>/reference/tfestimators/latest_checkpoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/latest_checkpoint/</guid><description> Get the Latest Checkpoint in a Checkpoint Directory
latest_checkpoint(checkpoint_dir, ...) Arguments checkpoint_dir The path to the checkpoint directory.
... Optional arguments passed on to latest_checkpoint().
See also Other utility functions: graph_keys</description></item><item><title>Get variable names and values associated with an estimator</title><link>/reference/tfestimators/variable_names_values/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/variable_names_values/</guid><description>These helper functions extract the names and values of variables in the graphs associated with trained estimator models.
variable_names(object) variable_value(object, variable = NULL) Arguments object A trained estimator model.
variable (Optional) Names of variables to extract as a character vector. If not specified, values for all variables are returned.
Value For variable_names(), a vector of variable names. For variable_values(), a named list of variable values.</description></item><item><title>High-level Estimator API in TensorFlow for R</title><link>/reference/tfestimators/tfestimators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/tfestimators/</guid><description>This library provides an R interface to the Estimator API inside TensorFlow that&#39;s designed to streamline the process of creating, evaluating, and deploying general machine learning and deep learning models.
Details TensorFlow is an open source software library for numerical computation using data flow graphs. Nodes in the graph represent mathematical operations, while the graph edges represent the multidimensional data arrays (tensors) communicated between them. The flexible architecture allows you to deploy computation to one or more CPUs or GPUs in a desktop, server, or mobile device with a single API.</description></item><item><title>Keras Estimators</title><link>/reference/tfestimators/keras_model_to_estimator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/keras_model_to_estimator/</guid><description>Create an Estimator from a compiled Keras model
keras_model_to_estimator(keras_model = NULL, keras_model_path = NULL, custom_objects = NULL, model_dir = NULL, config = NULL) Arguments keras_model A keras model.
keras_model_path Directory to a keras model on disk.
custom_objects Dictionary for custom objects.
model_dir Directory to save Estimator model parameters, graph and etc.
config Configuration object.</description></item><item><title>Linear Combined Deep Neural Networks</title><link>/reference/tfestimators/dnn_linear_combined_estimators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/dnn_linear_combined_estimators/</guid><description>Also known as wide-n-deep estimators, these are estimators for TensorFlow Linear and DNN joined models for regression.
dnn_linear_combined_regressor(model_dir = NULL, linear_feature_columns = NULL, linear_optimizer = &#34;Ftrl&#34;, dnn_feature_columns = NULL, dnn_optimizer = &#34;Adagrad&#34;, dnn_hidden_units = NULL, dnn_activation_fn = &#34;relu&#34;, dnn_dropout = NULL, label_dimension = 1L, weight_column = NULL, input_layer_partitioner = NULL, config = NULL) dnn_linear_combined_classifier(model_dir = NULL, linear_feature_columns = NULL, linear_optimizer = &#34;Ftrl&#34;, dnn_feature_columns = NULL, dnn_optimizer = &#34;Adagrad&#34;, dnn_hidden_units = NULL, dnn_activation_fn = &#34;</description></item><item><title>Model directory</title><link>/reference/tfestimators/model_dir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/model_dir/</guid><description> Get the directory where a model&#39;s artifacts are stored.
model_dir(object, ...) Arguments object Model object
... Unused</description></item><item><title>Monitor to Request Stop at a Specified Step</title><link>/reference/tfestimators/hook_stop_at_step/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/hook_stop_at_step/</guid><description> Monitor to Request Stop at a Specified Step
hook_stop_at_step(num_steps = NULL, last_step = NULL) Arguments num_steps Number of steps to execute.
last_step Step after which to stop.
See also Other session_run_hook wrappers: hook_checkpoint_saver, hook_global_step_waiter, hook_history_saver, hook_logging_tensor, hook_nan_tensor, hook_progress_bar, hook_step_counter, hook_summary_saver, session_run_hook</description></item><item><title>NaN Loss Monitor</title><link>/reference/tfestimators/hook_nan_tensor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/hook_nan_tensor/</guid><description> Monitors loss and stops training if loss is NaN. Can either fail with exception or just stop training.
hook_nan_tensor(loss_tensor, fail_on_nan_loss = TRUE) Arguments loss_tensor The loss tensor.
fail_on_nan_loss A boolean indicating whether to raise exception when loss is NaN.
See also Other session_run_hook wrappers: hook_checkpoint_saver, hook_global_step_waiter, hook_history_saver, hook_logging_tensor, hook_progress_bar, hook_step_counter, hook_stop_at_step, hook_summary_saver, session_run_hook</description></item><item><title>Objects exported from other packages</title><link>/reference/tfestimators/reexports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/reexports/</guid><description> These objects are imported from other packages. Follow the links below to see their documentation.
magrittr%&amp;gt;%
reticulateuse_python, use_virtualenv, use_condaenv, array_reshape
tensorflowtf, shape, install_tensorflow, tf_config, tensorboard, evaluate, train, train_and_evaluate, export_savedmodel
tfrunsflags, flag_numeric, flag_integer, flag_string, flag_boolean, run_dir
tibbleglimpse
tidyselectcontains, ends_with, everything, matches, num_range, one_of, starts_with, last_col</description></item><item><title>Plot training history</title><link>/reference/tfestimators/plot.tf_estimator_history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/plot.tf_estimator_history/</guid><description>Plots metrics recorded during training.
# S3 method for tf_estimator_history plot(x, y, metrics = NULL, method = c(&#34;auto&#34;, &#34;ggplot2&#34;, &#34;base&#34;), smooth = getOption(&#34;tf.estimator.plot.history.smooth&#34;, TRUE), theme_bw = getOption(&#34;tf.estimator.plot.history.theme_bw&#34;, FALSE), ...) Arguments x Training history object returned from train().
y Unused.
metrics One or more metrics to plot (e.g. c(&#39;total_losses&#39;, &#39;mean_losses&#39;)). Defaults to plotting all captured metrics.
method Method to use for plotting.</description></item><item><title>Prints Given Tensors Every N Local Steps, Every N Seconds, or at End</title><link>/reference/tfestimators/hook_logging_tensor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/hook_logging_tensor/</guid><description>The tensors will be printed to the log, with INFO severity.
hook_logging_tensor(tensors, every_n_iter = NULL, every_n_secs = NULL, formatter = NULL, at_end = FALSE) Arguments tensors A list that maps string-valued tags to tensors/tensor names.
every_n_iter An integer value, indicating the values of tensors will be printed once every N local steps taken on the current worker.
every_n_secs An integer or float value, indicating the values of tensors will be printed once every N seconds.</description></item><item><title>Represents Multi-Hot Representation of Given Categorical Column</title><link>/reference/tfestimators/column_indicator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/column_indicator/</guid><description>Used to wrap any column_categorical()* (e.g., to feed to DNN). Use column_embedding() if the inputs are sparse.
column_indicator(categorical_column) Arguments categorical_column A categorical column which is created by the column_categorical_with_*() or column_crossed() functions.
Value An indicator column.</description></item><item><title>Represents Sparse Feature where IDs are set by Hashing</title><link>/reference/tfestimators/column_categorical_with_hash_bucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/column_categorical_with_hash_bucket/</guid><description>Use this when your sparse features are in string or integer format, and you want to distribute your inputs into a finite number of buckets by hashing. output_id = Hash(input_feature_string) features, features$key$ is either tensor or sparse tensor object. If it&#39;s tensor object, missing values can be represented by -1 for int and &#39;&#39; for string. Note that these values are independent of the default_value argument.
column_categorical_with_hash_bucket(..., hash_bucket_size, dtype = tf$string) Arguments .</description></item><item><title>Run Configuration</title><link>/reference/tfestimators/run_config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/run_config/</guid><description> This class specifies the configurations for an Estimator run.
run_config() See also Other run_config methods: task_type
Examples if (FALSE) { config &amp;lt;- run_config() # Get the properties of the config names(config) # Change the mutable properties of the config config &amp;lt;- config$replace(tf_random_seed = 11L, save_summary_steps = 12L) # Print config as key value pairs print(config) }</description></item><item><title>Save an Estimator</title><link>/reference/tfestimators/export_savedmodel.tf_estimator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/export_savedmodel.tf_estimator/</guid><description>Save an estimator (alongside its weights) to the directory export_dir_base.
# S3 method for tf_estimator export_savedmodel(object, export_dir_base, serving_input_receiver_fn = NULL, assets_extra = NULL, as_text = FALSE, checkpoint_path = NULL, overwrite = TRUE, versioned = !overwrite, ...) Arguments object A TensorFlow estimator.
export_dir_base A string containing a directory in which to export the SavedModel.
serving_input_receiver_fn A function that takes no argument and returns a ServingInputReceiver.</description></item><item><title>Saves Checkpoints Every N Steps or Seconds</title><link>/reference/tfestimators/hook_checkpoint_saver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/hook_checkpoint_saver/</guid><description>Saves Checkpoints Every N Steps or Seconds
hook_checkpoint_saver(checkpoint_dir, save_secs = NULL, save_steps = NULL, saver = NULL, checkpoint_basename = &#34;model.ckpt&#34;, scaffold = NULL, listeners = NULL) Arguments checkpoint_dir The base directory for the checkpoint files.
save_secs An integer, indicating saving checkpoints every N secs.
save_steps An integer, indicating saving checkpoints every N steps.
saver A saver object, used for saving.</description></item><item><title>Saves Summaries Every N Steps</title><link>/reference/tfestimators/hook_summary_saver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/hook_summary_saver/</guid><description>Saves Summaries Every N Steps
hook_summary_saver(save_steps = NULL, save_secs = NULL, output_dir = NULL, summary_writer = NULL, scaffold = NULL, summary_op = NULL) Arguments save_steps An integer indicating saving summaries every N steps. Exactly one of save_secs and save_steps should be set.
save_secs An integer indicating saving summaries every N seconds.
output_dir The directory to save the summaries to. Only used if no summary_writer is supplied.</description></item><item><title>Standard Names to Use for Graph Collections</title><link>/reference/tfestimators/graph_keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/graph_keys/</guid><description>The standard library uses various well-known names to collect and retrieve values associated with a graph.
graph_keys() Details For example, the tf$Optimizer subclasses default to optimizing the variables collected undergraph_keys()$TRAINABLE_VARIABLES if NULL is specified, but it is also possible to pass an explicit list of variables.
The following standard keys are defined:
GLOBAL_VARIABLES: the default collection of Variable objects, shared across distributed environment (model variables are subset of these).</description></item><item><title>Steps per Second Monitor</title><link>/reference/tfestimators/hook_step_counter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/hook_step_counter/</guid><description> Steps per Second Monitor
hook_step_counter(every_n_steps = 100, every_n_secs = NULL, output_dir = NULL, summary_writer = NULL) Arguments every_n_steps Run this counter every N steps
every_n_secs Run this counter every N seconds
output_dir The output directory
summary_writer The summary writer
See also Other session_run_hook wrappers: hook_checkpoint_saver, hook_global_step_waiter, hook_history_saver, hook_logging_tensor, hook_nan_tensor, hook_progress_bar, hook_stop_at_step, hook_summary_saver, session_run_hook</description></item><item><title>Task Types</title><link>/reference/tfestimators/task_type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/task_type/</guid><description> This constant class gives the constant strings for available task types used in run_config.
task_type() See also Other run_config methods: run_config
Examples if (FALSE) { task_type()$MASTER }</description></item><item><title>Train an Estimator</title><link>/reference/tfestimators/train.tf_estimator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/train.tf_estimator/</guid><description>Train an estimator on a set of input data provides by the input_fn().
# S3 method for tf_estimator train(object, input_fn, steps = NULL, hooks = NULL, max_steps = NULL, saving_listeners = NULL, ...) Arguments object A TensorFlow estimator.
input_fn An input function, typically generated by the input_fn() helper function.
steps The number of steps for which the model should be trained on this particular train() invocation.</description></item><item><title>Train and evaluate the estimator.</title><link>/reference/tfestimators/train_and_evaluate.tf_estimator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/tfestimators/train_and_evaluate.tf_estimator/</guid><description>(Available since TensorFlow v1.4)
# S3 method for tf_estimator train_and_evaluate(object, train_spec, eval_spec, ...) Arguments object An estimator object to train and evaluate.
train_spec A TrainSpec instance to specify the training specification.
eval_spec A EvalSpec instance to specify the evaluation and export specification.
... Not used.
Details This utility function trains, evaluates, and (optionally) exports the model by using the given estimator.</description></item></channel></rss>